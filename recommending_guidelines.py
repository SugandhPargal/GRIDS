# -*- coding: utf-8 -*-
"""Recoomending Guidelines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hr5GTvK2uX0j5DBzx8ChnhMzNMKIE7wK
"""

import json

wp = open('Speed_Profile_D5.csv', 'a')

wp.write('Filename, Mean, HM, Median, Median_Group, Median_High, Median_Low, Mode, Std.Pop, Std, Variance_P, Variance, Min, Max, Range, Q1, Q2, Q3, IQR, 85thPercentile, Skewness, Kurtosis\n')

import statistics as st
import numpy as np
from scipy.stats import kurtosis
from scipy.stats import skew

wp.close()

wp = open('Speed_Profile_D5.csv', 'a')
def mode(dataset):
    frequency = {}

    for value in dataset:
        frequency[value] = frequency.get(value, 0) + 1

    most_frequent = max(frequency.values())

    modes = [key for key, value in frequency.items()
                      if value == most_frequent]

    return modes
def compute_speed(filename):
    speed = []
    cnt = 0
    count=4320
    with open(filename,'r') as file:
        
        for line in file:
            count=count+1
            a,b,c,d,e,f,g,h,i,j,k,l,m = line.split(' ')
            
            speed.append(float(b))
            if count%40==0:
              print(speed)
              mean1= st.mean(speed)
              hm= st.harmonic_mean(speed)
              median1= st.median(speed)
              mg= st.median_grouped(speed)
              mh= st.median_high(speed)
              ml= st.median_low(speed)
              #mode1= st.mode(speed)
              #mode1= '13.32'
              mode1= mode(speed)[0]
              stp= st.pstdev(speed)
              stn= st.stdev(speed)
              var_p= st.pvariance(speed)
              var= st.variance(speed)
        
              mn= min(speed)
              mx= max(speed)
              r= mx-mn
              Q1 = np.percentile(speed, 25, interpolation = 'midpoint')
              Q2 = np.percentile(speed, 50, interpolation = 'midpoint')
              Q3 = np.percentile(speed, 75, interpolation = 'midpoint')
              IQR= Q3-Q1
              Q4 = np.percentile(speed, 85, interpolation = 'midpoint')
              skewness= skew(speed, bias=False)
              kurt= kurtosis(speed, bias=False)
              wp.write(str(count/40) + ',' + str(mean1) + ','+ str(hm)+ ',' + str(median1)+ ',' + str(mg)+ ',' + str(mh)+ ',' + str(ml)+ ',' + str(mode1)+ ',' + str(stp)+ ',' + str(stn)+ ',' + str(var_p)+ ',' + str(var)+ ',' + str(mn)+ ',' + str(mx)+ ',' + str(r)+ ',' + str(Q1)+ ',' + str(Q2)+ ',' + str(Q3)+ ',' + str(IQR)+ ',' + str(Q4)+ ',' + str(skewness)+ ',' + str(kurt) + '\n')
              speed=[]
        
        
        # print(mean1)
        # print(hm)
        # print(median1)
        # print(mg)
        # print(mh)
        # print(ml)
        # print(mode1)
        # print(stp)
        # print(stn)
        # print(var_p)
        # print(var)
        # print(mn)
        # print(mx)
        # print(r)
        # print(Q1)
        # print(Q2)
        # print(Q3)
        
        # print(IQR)
        # print(Q4)
        # print(skewness)
        # print(kurt)
        
filename='RAW_GPS.txt'    
compute_speed(filename)
wp.close()

#wp = open('Speed_Profile_SanFransisco.csv', 'a')
def mode(dataset):
    frequency = {}

    for value in dataset:
        frequency[value] = frequency.get(value, 0) + 1

    most_frequent = max(frequency.values())

    modes = [key for key, value in frequency.items()
                      if value == most_frequent]

    return modes
def compute_speed(filename):
    speed = []
    cnt = 0
    with open(filename,'r') as file:
        for line in file:
            a,b,c,d = line.split(':')
            speed.append(float(d))
        print(speed)
        mean1= st.mean(speed)
        hm= st.harmonic_mean(speed)
        median1= st.median(speed)
        mg= st.median_grouped(speed)
        mh= st.median_high(speed)
        ml= st.median_low(speed)
        #mode1= st.mode(speed)
        #mode1= '13.32'
        mode1= mode(speed)[0]
        stp= st.pstdev(speed)
        stn= st.stdev(speed)
        var_p= st.pvariance(speed)
        var= st.variance(speed)
        
        mn= min(speed)
        mx= max(speed)
        r= mx-mn
        Q1 = np.percentile(speed, 25, interpolation = 'midpoint')
        Q2 = np.percentile(speed, 50, interpolation = 'midpoint')
        Q3 = np.percentile(speed, 75, interpolation = 'midpoint')
        IQR= Q3-Q1
        Q4 = np.percentile(speed, 85, interpolation = 'midpoint')
        skewness= skew(speed, bias=False)
        kurt= kurtosis(speed, bias=False)
        
        
        
        print(mean1)
        print(hm)
        print(median1)
        print(mg)
        print(mh)
        print(ml)
        print(mode1)
        print(stp)
        print(stn)
        print(var_p)
        print(var)
        print(mn)
        print(mx)
        print(r)
        print(Q1)
        print(Q2)
        print(Q3)
        
        print(IQR)
        print(Q4)
        print(skewness)
        print(kurt)
        #wp.write(filename + ',' + str(mean1) + ','+ str(hm)+ ',' + str(median1)+ ',' + str(mg)+ ',' + str(mh)+ ',' + str(ml)+ ',' + str(mode1)+ ',' + str(stp)+ ',' + str(stn)+ ',' + str(var_p)+ ',' + str(var)+ ',' + str(mn)+ ',' + str(mx)+ ',' + str(r)+ ',' + str(Q1)+ ',' + str(Q2)+ ',' + str(Q3)+ ',' + str(IQR)+ ',' + str(Q4)+ ',' + str(skewness)+ ',' + str(kurt) + '\n')
    
filename='0c370eb5-c45031e2.json.txt'    
compute_speed(filename)
#wp.close()

wp = open('Acceleration_Profile_D5.csv', 'a')

wp.write('Filename, Mean, Median, Median_Group, Median_High, Median_Low, Mode, Std.Pop, Std, Variance_P, Variance, Min, Max, Range, Q1, Q2, Q3, IQR, 85thPercentile, Skewness, Kurtosis, Jerk_Min, Jerk_Max, Jerk_Mean, Jerk_Q1, Jerk_Q2, Jerk_Q3, Jerk_IQR, Snap_Min, Snap_Max, Snap_Mean, Snap_Q1, Snap_Q2, Snap_Q3, Snap_IQR\n')

wp.close()

wp = open('Acceleration_Profile_D5.csv', 'a')
def mode(dataset):
    frequency = {}

    for value in dataset:
        frequency[value] = frequency.get(value, 0) + 1

    most_frequent = max(frequency.values())

    modes = [key for key, value in frequency.items()
                      if value == most_frequent]

    return modes
def compute_acceleration(filename):
    accel = []
    jerk = []
    snap=[]
    prev_acc = 0
    prev_time=0
    prev_jerk=0
    snap_val=0
    count=44800
    

    with open(filename,'r') as file:
        
        for line in file:
            count=count+1
            a,b,c,d,e,f,g,h,i,j,k,l = line.split(' ')
            
            accel.append(float(c))
            if((float(a)-prev_time)==0):
              jerkiness=0
            else:
              jerkiness= ((float(b)-float(prev_acc))*1000)/(float(a)-float(prev_time))
            jerk.append(jerkiness)
            prev_acc=float(b)
            if((float(a)-prev_time)==0):
              snap_val=0
            else:
              snap_val= ((jerkiness-float(prev_jerk))*1000)/(float(a)-float(prev_time))
            snap.append(snap_val)
            prev_jerk=jerkiness
            prev_time = float(a)

            if count%400==0:
              print(accel)
              mean1= st.mean(accel)
              #hm= st.harmonic_mean(accel)
              median1= st.median(accel)
              mg= st.median_grouped(accel)
              mh= st.median_high(accel)
              ml= st.median_low(accel)
              #mode1= st.mode(accel)
              #mode1= '13.32'
              mode1= mode(accel)[0]
              stp= st.pstdev(accel)
              stn= st.stdev(accel)
              var_p= st.pvariance(accel)
              var= st.variance(accel)
        
              mn= min(accel)
              mx= max(accel)
              r= mx-mn
              Q1 = np.percentile(accel, 25, interpolation = 'midpoint')
              Q2 = np.percentile(accel, 50, interpolation = 'midpoint')
              Q3 = np.percentile(accel, 75, interpolation = 'midpoint')
              IQR= Q3-Q1
              Q4 = np.percentile(accel, 85, interpolation = 'midpoint')
              skewness= skew(accel, bias=False)
              kurt= kurtosis(accel, bias=False)

              mn_jerk= min(jerk)
              mx_jerk= max(jerk)
              mean_jerk= st.mean(jerk)
              Q1_jerk = np.percentile(jerk, 25, interpolation = 'midpoint')
              Q2_jerk = np.percentile(jerk, 50, interpolation = 'midpoint')
              Q3_jerk = np.percentile(jerk, 75, interpolation = 'midpoint')
              IQR_jerk = Q3_jerk - Q1_jerk

              mn_snap= min(snap)
              mx_snap= max(snap)
              mean_snap= st.mean(snap)
              Q1_snap = np.percentile(snap, 25, interpolation = 'midpoint')
              Q2_snap = np.percentile(snap, 50, interpolation = 'midpoint')
              Q3_snap = np.percentile(snap, 75, interpolation = 'midpoint')
              IQR_snap = Q3_snap - Q1_snap
              wp.write(str(count/400) + ',' + str(mean1) + ',' + str(median1)+ ',' + str(mg)+ ',' + str(mh)+ ',' + str(ml)+ ',' + str(mode1)+ ',' + str(stp)+ ',' + str(stn)+ ',' + str(var_p)+ ',' + str(var)+ ',' + str(mn)+ ',' + str(mx)+ ',' + str(r)+ ',' + str(Q1)+ ',' + str(Q2)+ ',' + str(Q3)+ ',' + str(IQR)+ ',' + str(Q4)+ ',' + str(skewness)+ ',' + str(kurt) + ','+ str(mn_jerk) + ','+ str(mx_jerk)+ ','+ str(mean_jerk)+ ','+ str(Q1_jerk)+ ','+ str(Q2_jerk)+ ','+ str(Q3_jerk)+ ','+ str(IQR_jerk)+ ','+ str(mn_snap)+ ','+ str(mx_snap)+ ','+ str(mean_snap)+ ','+ str(Q1_snap)+ ','+ str(Q2_snap)+ ','+ str(Q3_snap)+ ','+ str(IQR_snap)+ '\n')
              accel=[]
              jerk=[]
              snap=[]
        
        
        
        # print(mean1)
        # print(len(accel))
        # print(median1)
        # print(mode1)
        # print(mn)
        # print(mx)
        # print(r)
        # print(Q1)
        # print(Q2)
        # print(Q3)
        # print(Q4)
        # print(IQR)
        # print(skewness)
        # print(kurt)
        
filename='RAW_ACCELEROMETERS.txt'    
compute_acceleration(filename)
wp.close()

"""MOTIVATION 1"""

import numpy as np
import matplotlib.pyplot as plt
data = [[0.26, 0.4, 0.77],
[0.2, 0, 0.934]]
data1 = [[2.554750004,2.055000067,0,2.390078832,5.712476824],
[3.39547617946352,3.59,0,2.27088698777197, 5.15692771123209]] 
data1_1 = [[2.554750004,2.390078832],
[92.04,8.4]] 
"day with car following"
data2= [[6.261951205,5.3,0,4.339767356,18.8335807],
        [9.66619044826144,10.4449996948242,11.079999923706,3.26916710560349,10.6874535643599]]
data2_2=[[6.261951205,4.339767356],[114.3,3.12]]
"Night with no traffic"
data3=[[3.272682913,3.53,0.15,1.900831425,3.613160106],
       [7.217560955664,6.23,0,7.15,51.2351434859889]]
data3_3=[[3.272682913,1.900831425],[84.3,17.2]]
"Day with congestion"
X = np.arange(2)


plt.bar(X+0.00 , data3_3[0], color = 'lightsteelblue', width = 0.25)
plt.bar(X + 0.25, data3_3[1], color = 'darkslateblue' ,width = 0.25, hatch='/')
plt.xlabel('Label', fontweight ='bold') 
plt.ylabel('Speed Profile Values', fontweight ='bold', fontsize='10') 
plt.xticks([r + 0.25 for r in range(len(data1[0]))],
           ['Mean', 'Std.Dev'],fontweight ='bold')
plt.yticks(fontweight ='bold')
plt.legend(["Newyork", "Spain"], loc ="upper right", fontsize='10')
plt.grid(color='blue', ls = '-.', lw = 0.25)
plt.title("Day Time with Congestion",fontweight ='bold')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
data = [[12.554750004, 15.261951205, 11.272682913],
[92.04, 114.3, 84.3]]
fig, ax = plt.subplots(figsize=(5,3))
"day with car following"

"Night with no traffic"

"Day with congestion"
X = np.arange(3)
plt.bar(X+0.00 , data[0], color = 'darkslateblue', width = 0.25, edgecolor ='grey')
plt.bar(X + 0.25, data[1], color = 'lightblue' ,width = 0.25,edgecolor ='grey', hatch='/') 
plt.ylabel('Speed Values', fontweight ='bold', fontsize='15') 
plt.xticks([r + 0.25 for r in range(len(data[0]))],
           ['Day Time \n Car Following', 'Day Time \n Congestion', "Night time \n No Congestion"],fontweight ='bold',fontsize='12')
plt.yticks(fontweight ='bold')
plt.legend(["New York", "Alcalá de \n Henares"], loc ="upper right", prop={'weight':'bold', 'size':'12'})
plt.grid(color='lightgrey', ls = '-.', lw = 0.05)
#plt.title("Speed under Different Environment",fontweight ='bold')
plt.savefig('motiv_speed.eps',format='eps', bbox_inches='tight')
plt.show()

"""Motivation Correlation"""

# importing pandas as pd
import pandas as pd
  
# Creating the dataframe 
df = pd.read_csv("NewYork_correlation.csv")

df

df = df[df['Coefficient_stopsY'].notna()]

df

y1=df.groupby('Rating').Coefficient_stopsY.apply(list).reset_index()

y1

x1=y1['Coefficient_stopsY'][1]
x1

# importing pandas as pd
import pandas as pd
  
# Creating the dataframe 
df = pd.read_csv("D1_correlations.csv")

df

df = df[df['Coefficient_stopsY'].notna()]
df

y2=df.groupby('Rating').Coefficient_stopsY.apply(list).reset_index()

y2

x2=y2['Coefficient_stopsY'][2]
x2

from scipy import stats
stats.ttest_ind(x1, x2)



"""Motivation 2"""

# importing pandas as pd
import pandas as pd
  
# Creating the dataframe 
df = pd.read_csv("Newyork_Binary.csv")

# applying groupby() function to
# group the data on team value.
gk1 = df.groupby('Jerkiness_binary')
gk2 = df.groupby('Turns')
gk3 = df.groupby('Stops_Y')
gk4 = df.groupby('Stops_Z')
gk5 = df.groupby('weaving')
gk6 = df.groupby('swerving')
gk7 = df.groupby('sideslip')

# Let's print the first entries
# in all the groups formed.

y1=df.groupby('Jerkiness_binary').Rating.apply(list).reset_index()
y2=df.groupby('Turns').Rating.apply(list).reset_index()
y3=df.groupby('Stops_Y').Rating.apply(list).reset_index()
y4=df.groupby('Stops_Z').Rating.apply(list).reset_index()
y5=df.groupby('weaving').Rating.apply(list).reset_index()
y6=df.groupby('swerving').Rating.apply(list).reset_index()
y7=df.groupby('sideslip').Rating.apply(list).reset_index()

y

x1=y1['Rating'][1]
x2=y2['Rating'][1]
x3=y3['Rating'][1]
x4=y4['Rating'][1]
x5=y5['Rating'][1]
x6=y6['Rating'][1]
x7=y7['Rating'][1]

Ncl1= [x1 for x1 in x if str(x1) != 'nan']

Ncl1

x=y['Rating'][1]
Ncl2 = [x1 for x1 in x if str(x1) != 'nan']
Ncl2

x=y['Coefficient_stopsY'][2]
Ncl3 = [x1 for x1 in x if str(x1) != 'nan']
Ncl3

# Import libraries
import matplotlib.pyplot as plt
import numpy as np


# Creating dataset
np.random.seed(10)

#data_1 = Ncl1
#data_2 = Ncl2
#data_3 = Ncl3
data1= [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,2,3,3,3,3,3,3,3]
data2=[4,5,5,5,5,4,4,4,4,4,4,4,5,5,5,3,3,3,3,4,4,4,4,4,3]
data = [data_1, data_2]

fig = plt.figure(figsize =(10, 7))

# Creating axes instance
ax = fig.add_axes([0, 0, 1, 1])

# Creating plot
bp = ax.boxplot(data)

# show plot
plt.show()

# importing pandas as pd
import pandas as pd
  
# Creating the dataframe 
df = pd.read_csv("SanFrancisco_Binary.csv")
# applying groupby() function to
# group the data on team value.
df

y8=df.groupby('Jerkiness').Rating.apply(list).reset_index()
y9=df.groupby('Turns').Rating.apply(list).reset_index()
y10=df.groupby('Stops_Y').Rating.apply(list).reset_index()
y11=df.groupby('Stops_Z').Rating.apply(list).reset_index()
y12=df.groupby('weaving').Rating.apply(list).reset_index()
y13=df.groupby('swerving').Rating.apply(list).reset_index()
y14=df.groupby('sideslipping').Rating.apply(list).reset_index()

x8=y8['Rating'][1]
x9=y9['Rating'][1]
x10=y10['Rating'][1]
x11=y11['Rating'][1]
x12=y12['Rating'][1]
x13=y13['Rating'][1]
x14=y14['Rating'][1]
"""x=y['Rating'][0]
Scl1 = [x1 for x1 in x if str(x1) != 'nan']
Scl1
x=y['Rating'][1]
Scl2 = [x1 for x1 in x if str(x1) != 'nan']
Scl2"""

# Import libraries
import matplotlib.pyplot as plt
import numpy as np


# Creating dataset
np.random.seed(10)

data_1 = Scl1
data_2 = Scl2
#data_3 = cleanedList3

data = [data_1, data_2]

fig = plt.figure(figsize =(10, 7))

# Creating axes instance
ax = fig.add_axes([0, 0, 1, 1])

# Creating plot
bp = ax.boxplot(data)

# show plot
plt.show()

from scipy import stats
stats.ttest_ind(Ncl1, Scl1)

stats.ttest_ind(Ncl2, Scl2)

# Import libraries
import matplotlib.pyplot as plt
import numpy as np
 
 
# Creating dataset
np.random.seed(10)
 
data_1 = (3,3,3,3,3,5,5,5,3,3,3,3,4,4,4,3,3,3,3)   
data_2 = (4,4,4,4,4,4,4,4,3,3,5,5,4,5,5,4,4,4,5)

data = [data_1, data_2]
 
fig = plt.figure(figsize =(10, 7))
 
# Creating axes instance
ax = fig.add_axes([0, 0, 1, 1])
ax.set_xticklabels(["Newyork","SanFransisco"])

# Creating plot
bp = ax.boxplot(data)
plt.xticks(rotation=45) 
# show plot
plt.show()

# Import libraries
import matplotlib.pyplot as plt
import numpy as np
from pylab import plot, show, savefig, xlim, figure, ylim, legend, boxplot, setp, axes

# function for setting the colors of the box plots pairs
def setBoxColors(bp):
   
    setp(bp['boxes'], color='steelblue')
    setp(bp['caps'], color='steelblue')
    setp(bp['whiskers'], color='steelblue')
    setp(bp['medians'], color='black')

    


fig, ax = plt.subplots(figsize=(9,5))



"""# first boxplot pair
bp = boxplot(x1, patch_artist= True, positions = [1], widths = 0.4)
setBoxColors(bp)

# second boxplot pair
bp = boxplot(x8, patch_artist= True,positions = [2], widths = 0.4)
setBoxColors(bp)

# thrid boxplot pair
bp = boxplot(x2, patch_artist= True, positions = [3], widths = 0.4)
setBoxColors(bp)

# fourth boxplot pair
bp = boxplot(x9, patch_artist= True, positions = [4], widths = 0.4)
setBoxColors(bp)

# thrid boxplot pair
bp = boxplot(x3, patch_artist= True, positions = [5], widths = 0.4)
setBoxColors(bp)

bp = boxplot(x10, patch_artist= True, positions = [6], widths = 0.4)
setBoxColors(bp)

bp = boxplot(x4, patch_artist= True, positions = [7], widths = 0.4)
setBoxColors(bp)

bp = boxplot(x11, patch_artist= True, positions = [8], widths = 0.4)
setBoxColors(bp)
"""
bp = boxplot(x5, patch_artist= True, positions = [1], widths = 0.4)
setBoxColors(bp)

bp = boxplot(x12, patch_artist= True, positions = [2], widths = 0.4)
setBoxColors(bp)
bp = boxplot(x6, patch_artist= True, positions = [3], widths = 0.4)
setBoxColors(bp)
bp = boxplot(x13, patch_artist= True, positions = [4], widths = 0.4)
setBoxColors(bp)
bp = boxplot(x7, patch_artist= True, positions = [5], widths = 0.4)
setBoxColors(bp)
bp = boxplot(x14, patch_artist= True, positions = [6], widths = 0.4)
setBoxColors(bp)
#'Jerk_C1','Jerk_C2','Turn_C1','Turn_C2','StopsX_C1', 'StopsX_C2','StopsY_C1','STopsY_C2',
#,7,8,9,10,11,12,13,14
ax.set_xticklabels(['Turns_C1','Turns_C2','Jerk_C1','Jerk_C2','Stops_C1','Stops_C2'])
ax.set_xticks([1, 2, 3, 4, 5,6])
#ax.legend(fontsize=22,loc='upper right')
plt.ylabel("Driver Score",fontsize=28, fontweight='bold')
plt.xlabel("Driving Signatures",fontsize=28, fontweight='bold')
plt.yticks(fontsize=22, fontweight='bold')
plt.xticks(fontsize=12, fontweight='bold')
plt.grid(color='pink',lw='0.3', linestyle='-')
plt.tight_layout()
plt.savefig('noisefree.eps',format='eps')
show()

# Import libraries
import matplotlib.pyplot as plt
import numpy as np
from pylab import plot, show, savefig, xlim, figure, ylim, legend, boxplot, setp, axes

# function for setting the colors of the box plots pairs
def setBoxColors(bp):
   
    setp(bp['boxes'], color='steelblue')
    setp(bp['caps'], color='steelblue')
    setp(bp['whiskers'], color='steelblue')
    setp(bp['medians'], color='black',lw='1')

    


fig, ax = plt.subplots(figsize=(8,3))

data1=[3,4,4,4,4,5,5,5,5,5,5,5]
data2=[3,3,3,3,4,4,4,4,4,4,4,4]
data3=[4,4,4,4,4,4,4,5,5,4,5,4]
data4=[4,4,4,4,3,3,3,3,4,4,3,3]
data5=[3,4,4,4,4,5,5,5,5,5,5,5]
data6=[3,3,4,4,4,4,4,3,4,4,4,4]
bp = boxplot(data1, patch_artist= True, positions = [1], widths = 0.4)
setBoxColors(bp)

bp = boxplot(data2, patch_artist= True, positions = [2], widths = 0.4)
setBoxColors(bp)
bp = boxplot(data3, patch_artist= True, positions = [3], widths = 0.4)
setBoxColors(bp)
bp = boxplot(data4, patch_artist= True, positions = [4], widths = 0.4)
setBoxColors(bp)
bp = boxplot(data5, patch_artist= True, positions = [5], widths = 0.4)
setBoxColors(bp)
bp = boxplot(data6, patch_artist= True, positions = [6], widths = 0.4)
setBoxColors(bp)
#'Jerk_C1','Jerk_C2','Turn_C1','Turn_C2','StopsX_C1', 'StopsX_C2','StopsY_C1','STopsY_C2',
#,7,8,9,10,11,12,13,14
ax.set_xticklabels(['Turns_C1','Turns_C2','Jerk_C1','Jerk_C2','Stops_C1','Stops_C2'])
ax.set_xticks([1, 2, 3, 4, 5,6])
#ax.legend(fontsize=22,loc='upper right')
plt.ylabel("Driving Score",fontsize=15, fontweight='bold')
plt.yticks(fontsize=15, fontweight='bold')
plt.xticks(fontsize=15, fontweight='bold')
plt.grid(color='pink',lw='0.25', linestyle='-')
plt.tight_layout()
plt.savefig('driving_score.eps',format='eps')
show()

"""Compute L2 Norm"""

import pandas as pd
df = pd.read_csv('file_temp.csv', index_col=False)
actual_value = df['column1']
predicted_value = df['c5']

import numpy as np
#actual_value = np.array([0.0090006939,0.0131126625,0.01970882295,0.01070812905,0.0131126625,0,0.0886568563,0.0886568563])
#predicted_value = np.array([0.008598175164,0.01163257545,0.01616202397,0.007563848802,0.01163257545,0.004896300226,0.03561509511,0.03071879488])

# take square of differences and sum them
l2 = np.sum(np.power((actual_value-predicted_value),2))
print(l2)

"""Plotting OUTPUT"""

import plotly.express as px
import pandas as pd
stages = ["Speed Profile", "Maneuvers", "Environmental Obstacles", "Front Vehicle Profile"]
df_mtl = pd.DataFrame(dict(number=[39, 27.4, 20.6, 11], stage=stages))
df_mtl['office'] = 'Montreal'
df_toronto = pd.DataFrame(dict(number=[52, 36, 18,11], stage=stages))
df_toronto['office'] = 'Toronto'
df = pd.concat([df_mtl, df_toronto], axis=0)
fig = px.funnel(df, x='number', y='stage', color='office')
fig.show()

!pip install -U kaleido

import kaleido
engine= "kaleido"

"""D1 vs NewYork

"""



import plotly
plotly.__version__

pip install -c plotly plotly-orca

pip install plotly==5.3.1

pip install -U kaleido

from plotly import graph_objects as go

fig = go.Figure()

fig.add_trace(go.Funnel(
    name = 'High',
    y = ["<b>SP</b>","<b>DM</b>","<b>TO</b>","<b>PV</b>"],
    x = [30, 30, 30, 60],
    text = ["<b>Drive Slow</b>","<b>Take Wider <br> Turn</b>", "<b>Keep An Eye <br>On Peer Cars</b>","<b>Maintain Relative Speed <br> Between The Preceding Vehicle </b>"],
    
    textinfo = "text",
    marker = {"color": ["peachpuff", "peachpuff", "peachpuff", "peachpuff"]}))

fig.add_trace(go.Funnel(
    name = 'Moderate',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>","<b>TO</b>","<b>PV</b>"],
    x = [30, 30, 30, 60],
    text = ["<b>Press Clutch <br> Fully Down</b>","<b>Maintain Your <br> Lane</b>", "<b>Slow Down At <br> Cross Walks</b>", "<b>Drive Defensively</b>"],
    
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["lightblue", "lightblue", "lightblue", "lightblue"]}))

fig.add_trace(go.Funnel(
    name = 'Least',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>"],
    x = [30, 30],
    text = ["<b>Do not <br> Oversteer</b>","<b>Take Brakes<br> Smoothly</b>"],
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["mediumaquamarine", "mediumaquamarine"]}))
fig.update_traces(textposition='inside',textfont_size=20)    
fig.show()

"""Temporal recommendation along with events behind"""

from plotly import graph_objects as go

fig = go.Figure()

fig.add_trace(go.Funnel(
    name = 'High',
    y = ["<b>SP</b>", "<b>DM</b>","<b>PV</b>"],
    x = [30, 30,30],
    text = ["<b>Drive Slow</b>","<b>Take Wider Turns</b>","<b>Keep Distance From <br> Preceding Vehicle</b>"],
    
    textinfo = "text",
    marker = {"color": ["peachpuff", "peachpuff", "peachpuff", "peachpuff"]}))

fig.add_trace(go.Funnel(
    name = 'Moderate',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>","<b>PV</b>"],
    x = [30, 30, 30],
    text = ["<b>Donot Oversteer</b>","<b>Donot Change <br> Lane Frequently</b>", "<b>Follow Preceding <br> Vehicles' Braking Action</b>"],
    
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["lightblue", "lightblue", "lightblue", "lightblue"]}))

"""fig.add_trace(go.Funnel(
    name = 'Least',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>"],
    x = [30, 30],
    text = ["<b>Slight Poor <br> Road Condition</b>","<b>Few Abrupt Turns <br> In Visiting City</b>"],
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["mediumaquamarine", "mediumaquamarine"]}))"""
fig.update_traces(textposition='inside',textfont_size=20)    
fig.show()

from plotly import graph_objects as go

fig = go.Figure()

fig.add_trace(go.Funnel(
    name = 'High',
    y = ["<b>SP</b>", "<b>DM</b>","<b>PV</b>"],
    x = [10, 10,10],
    text = ["<b>Drive Slow</b>","<b>Maintain Your Lane</b>","<b>Follow Preceding <br> Vehicles' Braking Action</b>"],
    
    textinfo = "text",
    marker = {"color": ["peachpuff", "peachpuff", "peachpuff", "peachpuff"]}))

"""fig.add_trace(go.Funnel(
    name = 'Moderate',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>","<b>PV</b>"],
    x = [30, 30, 30],
    text = ["<b>Donot Oversteer</b>","<b>Donot Change <br> Lane Frequently</b>", "<b>Follow Preceding <br> Vehicles' Braking Action</b>"],
    
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["lightblue", "lightblue", "lightblue", "lightblue"]}))"""

"""fig.add_trace(go.Funnel(
    name = 'Least',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>"],
    x = [30, 30],
    text = ["<b>Slight Poor <br> Road Condition</b>","<b>Few Abrupt Turns <br> In Visiting City</b>"],
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["mediumaquamarine", "mediumaquamarine"]}))"""
fig.update_traces(textposition='inside',textfont_size=20)    
fig.show()

from plotly import graph_objects as go

fig = go.Figure()

fig.add_trace(go.Funnel(
    name = 'High',
    y = ["<b>DM</b>", "<b>SP</b>","<b>TO</b>","<b>PV</b>"],
    x = [10, 10,10,10],
    text = ["<b>Take Brake Smoothly</b>","<b>Donot Fluctuate Speed</b>","<b>Slowdown At Cross-Walks</b>","<b>Follow Preceding <br> Vehicles' Braking Action</b>"],
    
    textinfo = "text",
    marker = {"color": ["peachpuff", "peachpuff", "peachpuff", "peachpuff"]}))

"""fig.add_trace(go.Funnel(
    name = 'Moderate',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>","<b>PV</b>"],
    x = [30, 30, 30],
    text = ["<b>Donot Oversteer</b>","<b>Donot Change <br> Lane Frequently</b>", "<b>Follow Preceding <br> Vehicles' Braking Action</b>"],
    
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["lightblue", "lightblue", "lightblue", "lightblue"]}))"""

"""fig.add_trace(go.Funnel(
    name = 'Least',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>"],
    x = [30, 30],
    text = ["<b>Slight Poor <br> Road Condition</b>","<b>Few Abrupt Turns <br> In Visiting City</b>"],
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["mediumaquamarine", "mediumaquamarine"]}))"""
fig.update_traces(textposition='inside',textfont_size=20)    
fig.show()

"""D5 vs New York

"""

from plotly import graph_objects as go

fig = go.Figure()

fig.add_trace(go.Funnel(
    name = 'High',
    y = ["<b>SP</b>", "<b>DM</b>","<b>PV</b>"],
    x = [30, 30, 60],
    text = ["<b>Drive Slow</b>","<b>Take Wider <br> Turns</b>","<b>Maintain Relative Speed <br> Between The Preceding Vehicle </b>"],
    
    textinfo = "text",
    marker = {"color": ["peachpuff", "peachpuff", "peachpuff"]}))

fig.add_trace(go.Funnel(
    name = 'Moderate',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>"],
    x = [30, 30],
    text = ["<b>---</b>","<b>Strictly Maintain <br> Your Lane</b>"],
    
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["lightblue", "lightblue", "lightblue"]}))

fig.add_trace(go.Funnel(
    name = 'Least',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>"],
    x = [30, 30],
    text = ["<b>---</b>","<b>Take Brake <br> Smoothly</b>"],
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["mediumaquamarine", "mediumaquamarine"]}))
fig.update_traces(textposition='inside',textfont_size=20)
fig.show()

"""D1 vs San Fransisco"""

from plotly import graph_objects as go

fig = go.Figure()

fig.add_trace(go.Funnel(
    name = 'High',
    y = ["<b>SP</b>", "<b>DM</b>","<b>TO</b>","<b>PV</b>"],
    x = [30, 30, 30, 50],
    text = ["<b>Do not Fluctuate<br> Speed</b>","<b>Take Less <br>Wider Turns</b>","<b>Keep An Eye <br> On Peer Cars</b>", "<b>Donot Fluctuate Relative Speed <br> Between Preceding Vehicle</b>"],
    
    textinfo = "text",
    marker = {"color": ["peachpuff", "peachpuff", "peachpuff", "peachpuff"]}))

fig.add_trace(go.Funnel(
    name = 'Moderate',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>"],
    x = [30, 30, 30, 30],
    text = ["<b>Press Clutch <br> Fully</b>","<b>Avoid Changing <br> Lanes Frequently</b>"],
    
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["Lightblue", "Lightblue", "Lightblue", "Lightblue"]}))


fig.update_traces(textposition='inside',textfont_size=20)
fig.show()

"""D5 vs San Francisco"""

from plotly import graph_objects as go

fig = go.Figure()

fig.add_trace(go.Funnel(
    name = 'High',
    y = ["<b>SP</b>", "<b>DM</b>","<b>PV</b>"],
    x = [30, 30, 60],
    text = ["<b>Do not Fluctuate <br> Speed</b>","<b>Take Less <br> Wider Turns</b>", "<b>Maintain Relative Distance <br> Between Preceding Vehicle</b>"], 
    textinfo = "text",
    marker = {"color": ["peachpuff", "peachpuff", "peachpuff", "peachpuff"]}))

fig.add_trace(go.Funnel(
    name = 'Moderate',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>"],
    x = [30, 30],
    text = ["<b>---</b>","<b>Avoid Changing <br> Lane Frequently</b>"],
    
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["Lightblue", "Lightblue", "Lightblue", "Lightblue"]}))

fig.add_trace(go.Funnel(
    name = 'Least',
    orientation = "h",
    y = ["<b>SP</b>", "<b>DM</b>"],
    x = [30, 30],
    text = ["<b>---</b>","<b>Take Brake <br> Smoothly</b>"],
    textposition = "inside",
    textinfo = "text",
    marker = {"color": ["mediumaquamarine", "mediumaquamarine"]}))

fig.update_traces(textposition='inside',textfont_size=20)
fig.show()

from plotly import graph_objects as go

fig = go.Figure(go.Funnelarea(
    text = ["Median","Mean", "Jerkiness", "Snap", "Variation"],
    values = [5, 4, 3, 2, 1]
    ))
fig.show()

import matplotlib.pyplot as plt
 
# line 1 points
x1 = [1,2,3,4,5,6,7]
y1 = [12,3,2,10,11,2,3]
# plotting the line 1 points
plt.plot(x1, y1, label = "sensor1")
 
# line 2 points
x2 = [1,2,3,4,5,6,7]
y2 = [17,7,6,20,12,10,8]
# plotting the line 2 points
plt.plot(x2, y2, label = "sensor2")

# line 3 points
x3 = [1,2,3,4,5,6,7]
y3 = [12,17,9,15,10,8,15]
# plotting the line 2 points
plt.plot(x3, y3, label = "sensor3")
 
# naming the x axis
plt.xlabel('TIME',fontweight ='bold', fontsize='15')
# naming the y axis
plt.ylabel('SENSOR DATA',fontweight ='bold', fontsize='15')
# giving a title to my graph

 
# show a legend on the plot
plt.legend()
 
# function to show the plot
plt.show()

