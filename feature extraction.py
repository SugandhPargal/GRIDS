# -*- coding: utf-8 -*-
"""Recoomending Guidelines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hr5GTvK2uX0j5DBzx8ChnhMzNMKIE7wK
"""

import json

wp = open('Speed_Profile_D5.csv', 'a')

wp.write('Filename, Mean, HM, Median, Median_Group, Median_High, Median_Low, Mode, Std.Pop, Std, Variance_P, Variance, Min, Max, Range, Q1, Q2, Q3, IQR, 85thPercentile, Skewness, Kurtosis\n')

import statistics as st
import numpy as np
from scipy.stats import kurtosis
from scipy.stats import skew

wp.close()

wp = open('Speed_Profile_D5.csv', 'a')
def mode(dataset):
    frequency = {}

    for value in dataset:
        frequency[value] = frequency.get(value, 0) + 1

    most_frequent = max(frequency.values())

    modes = [key for key, value in frequency.items()
                      if value == most_frequent]

    return modes
def compute_speed(filename):
    speed = []
    cnt = 0
    count=4320
    with open(filename,'r') as file:
        
        for line in file:
            count=count+1
            a,b,c,d,e,f,g,h,i,j,k,l,m = line.split(' ')
            
            speed.append(float(b))
            if count%40==0:
              print(speed)
              mean1= st.mean(speed)
              hm= st.harmonic_mean(speed)
              median1= st.median(speed)
              mg= st.median_grouped(speed)
              mh= st.median_high(speed)
              ml= st.median_low(speed)
              #mode1= st.mode(speed)
              #mode1= '13.32'
              mode1= mode(speed)[0]
              stp= st.pstdev(speed)
              stn= st.stdev(speed)
              var_p= st.pvariance(speed)
              var= st.variance(speed)
        
              mn= min(speed)
              mx= max(speed)
              r= mx-mn
              Q1 = np.percentile(speed, 25, interpolation = 'midpoint')
              Q2 = np.percentile(speed, 50, interpolation = 'midpoint')
              Q3 = np.percentile(speed, 75, interpolation = 'midpoint')
              IQR= Q3-Q1
              Q4 = np.percentile(speed, 85, interpolation = 'midpoint')
              skewness= skew(speed, bias=False)
              kurt= kurtosis(speed, bias=False)
              wp.write(str(count/40) + ',' + str(mean1) + ','+ str(hm)+ ',' + str(median1)+ ',' + str(mg)+ ',' + str(mh)+ ',' + str(ml)+ ',' + str(mode1)+ ',' + str(stp)+ ',' + str(stn)+ ',' + str(var_p)+ ',' + str(var)+ ',' + str(mn)+ ',' + str(mx)+ ',' + str(r)+ ',' + str(Q1)+ ',' + str(Q2)+ ',' + str(Q3)+ ',' + str(IQR)+ ',' + str(Q4)+ ',' + str(skewness)+ ',' + str(kurt) + '\n')
              speed=[]
        
        
        # print(mean1)
        # print(hm)
        # print(median1)
        # print(mg)
        # print(mh)
        # print(ml)
        # print(mode1)
        # print(stp)
        # print(stn)
        # print(var_p)
        # print(var)
        # print(mn)
        # print(mx)
        # print(r)
        # print(Q1)
        # print(Q2)
        # print(Q3)
        
        # print(IQR)
        # print(Q4)
        # print(skewness)
        # print(kurt)
        
filename='RAW_GPS.txt'    
compute_speed(filename)
wp.close()

#wp = open('Speed_Profile_SanFransisco.csv', 'a')
def mode(dataset):
    frequency = {}

    for value in dataset:
        frequency[value] = frequency.get(value, 0) + 1

    most_frequent = max(frequency.values())

    modes = [key for key, value in frequency.items()
                      if value == most_frequent]

    return modes
def compute_speed(filename):
    speed = []
    cnt = 0
    with open(filename,'r') as file:
        for line in file:
            a,b,c,d = line.split(':')
            speed.append(float(d))
        print(speed)
        mean1= st.mean(speed)
        hm= st.harmonic_mean(speed)
        median1= st.median(speed)
        mg= st.median_grouped(speed)
        mh= st.median_high(speed)
        ml= st.median_low(speed)
        #mode1= st.mode(speed)
        #mode1= '13.32'
        mode1= mode(speed)[0]
        stp= st.pstdev(speed)
        stn= st.stdev(speed)
        var_p= st.pvariance(speed)
        var= st.variance(speed)
        
        mn= min(speed)
        mx= max(speed)
        r= mx-mn
        Q1 = np.percentile(speed, 25, interpolation = 'midpoint')
        Q2 = np.percentile(speed, 50, interpolation = 'midpoint')
        Q3 = np.percentile(speed, 75, interpolation = 'midpoint')
        IQR= Q3-Q1
        Q4 = np.percentile(speed, 85, interpolation = 'midpoint')
        skewness= skew(speed, bias=False)
        kurt= kurtosis(speed, bias=False)
        
        
        
        print(mean1)
        print(hm)
        print(median1)
        print(mg)
        print(mh)
        print(ml)
        print(mode1)
        print(stp)
        print(stn)
        print(var_p)
        print(var)
        print(mn)
        print(mx)
        print(r)
        print(Q1)
        print(Q2)
        print(Q3)
        
        print(IQR)
        print(Q4)
        print(skewness)
        print(kurt)
        #wp.write(filename + ',' + str(mean1) + ','+ str(hm)+ ',' + str(median1)+ ',' + str(mg)+ ',' + str(mh)+ ',' + str(ml)+ ',' + str(mode1)+ ',' + str(stp)+ ',' + str(stn)+ ',' + str(var_p)+ ',' + str(var)+ ',' + str(mn)+ ',' + str(mx)+ ',' + str(r)+ ',' + str(Q1)+ ',' + str(Q2)+ ',' + str(Q3)+ ',' + str(IQR)+ ',' + str(Q4)+ ',' + str(skewness)+ ',' + str(kurt) + '\n')
    
filename='0c370eb5-c45031e2.json.txt'    
compute_speed(filename)
#wp.close()

wp = open('Acceleration_Profile_D5.csv', 'a')

wp.write('Filename, Mean, Median, Median_Group, Median_High, Median_Low, Mode, Std.Pop, Std, Variance_P, Variance, Min, Max, Range, Q1, Q2, Q3, IQR, 85thPercentile, Skewness, Kurtosis, Jerk_Min, Jerk_Max, Jerk_Mean, Jerk_Q1, Jerk_Q2, Jerk_Q3, Jerk_IQR, Snap_Min, Snap_Max, Snap_Mean, Snap_Q1, Snap_Q2, Snap_Q3, Snap_IQR\n')

wp.close()

wp = open('Acceleration_Profile_D5.csv', 'a')
def mode(dataset):
    frequency = {}

    for value in dataset:
        frequency[value] = frequency.get(value, 0) + 1

    most_frequent = max(frequency.values())

    modes = [key for key, value in frequency.items()
                      if value == most_frequent]

    return modes
def compute_acceleration(filename):
    accel = []
    jerk = []
    snap=[]
    prev_acc = 0
    prev_time=0
    prev_jerk=0
    snap_val=0
    count=44800
    

    with open(filename,'r') as file:
        
        for line in file:
            count=count+1
            a,b,c,d,e,f,g,h,i,j,k,l = line.split(' ')
            
            accel.append(float(c))
            if((float(a)-prev_time)==0):
              jerkiness=0
            else:
              jerkiness= ((float(b)-float(prev_acc))*1000)/(float(a)-float(prev_time))
            jerk.append(jerkiness)
            prev_acc=float(b)
            if((float(a)-prev_time)==0):
              snap_val=0
            else:
              snap_val= ((jerkiness-float(prev_jerk))*1000)/(float(a)-float(prev_time))
            snap.append(snap_val)
            prev_jerk=jerkiness
            prev_time = float(a)

            if count%400==0:
              print(accel)
              mean1= st.mean(accel)
              #hm= st.harmonic_mean(accel)
              median1= st.median(accel)
              mg= st.median_grouped(accel)
              mh= st.median_high(accel)
              ml= st.median_low(accel)
              #mode1= st.mode(accel)
              #mode1= '13.32'
              mode1= mode(accel)[0]
              stp= st.pstdev(accel)
              stn= st.stdev(accel)
              var_p= st.pvariance(accel)
              var= st.variance(accel)
        
              mn= min(accel)
              mx= max(accel)
              r= mx-mn
              Q1 = np.percentile(accel, 25, interpolation = 'midpoint')
              Q2 = np.percentile(accel, 50, interpolation = 'midpoint')
              Q3 = np.percentile(accel, 75, interpolation = 'midpoint')
              IQR= Q3-Q1
              Q4 = np.percentile(accel, 85, interpolation = 'midpoint')
              skewness= skew(accel, bias=False)
              kurt= kurtosis(accel, bias=False)

              mn_jerk= min(jerk)
              mx_jerk= max(jerk)
              mean_jerk= st.mean(jerk)
              Q1_jerk = np.percentile(jerk, 25, interpolation = 'midpoint')
              Q2_jerk = np.percentile(jerk, 50, interpolation = 'midpoint')
              Q3_jerk = np.percentile(jerk, 75, interpolation = 'midpoint')
              IQR_jerk = Q3_jerk - Q1_jerk

              mn_snap= min(snap)
              mx_snap= max(snap)
              mean_snap= st.mean(snap)
              Q1_snap = np.percentile(snap, 25, interpolation = 'midpoint')
              Q2_snap = np.percentile(snap, 50, interpolation = 'midpoint')
              Q3_snap = np.percentile(snap, 75, interpolation = 'midpoint')
              IQR_snap = Q3_snap - Q1_snap
              wp.write(str(count/400) + ',' + str(mean1) + ',' + str(median1)+ ',' + str(mg)+ ',' + str(mh)+ ',' + str(ml)+ ',' + str(mode1)+ ',' + str(stp)+ ',' + str(stn)+ ',' + str(var_p)+ ',' + str(var)+ ',' + str(mn)+ ',' + str(mx)+ ',' + str(r)+ ',' + str(Q1)+ ',' + str(Q2)+ ',' + str(Q3)+ ',' + str(IQR)+ ',' + str(Q4)+ ',' + str(skewness)+ ',' + str(kurt) + ','+ str(mn_jerk) + ','+ str(mx_jerk)+ ','+ str(mean_jerk)+ ','+ str(Q1_jerk)+ ','+ str(Q2_jerk)+ ','+ str(Q3_jerk)+ ','+ str(IQR_jerk)+ ','+ str(mn_snap)+ ','+ str(mx_snap)+ ','+ str(mean_snap)+ ','+ str(Q1_snap)+ ','+ str(Q2_snap)+ ','+ str(Q3_snap)+ ','+ str(IQR_snap)+ '\n')
              accel=[]
              jerk=[]
              snap=[]
        
        
        
        # print(mean1)
        # print(len(accel))
        # print(median1)
        # print(mode1)
        # print(mn)
        # print(mx)
        # print(r)
        # print(Q1)
        # print(Q2)
        # print(Q3)
        # print(Q4)
        # print(IQR)
        # print(skewness)
        # print(kurt)
        
filename='RAW_ACCELEROMETERS.txt'    
compute_acceleration(filename)
wp.close()
